import sys
import os
from krita import *

# API Listing: https://github.com/scottpetrovic/krita-python-auto-complete/blob/master/output/PyKrita.py
def link_external_packages():
    # get the path to the pykrita directory located in the Resource Directory
    resource_dir = str(Krita.instance().readSetting("", "ResourceDirectory", ""))
    pykrita_resource_dir =  os.path.join(resource_dir, "pykrita")
    lib_file_path = os.path.join(pykrita_resource_dir, "my_extension/lib")

    # fetch the dependecy path that was generated in the .lib file generated by our build script
    with open(lib_file_path, "r") as f:
        dep_path = os.path.join(pykrita_resource_dir, f.readline()[:-1])

    # set the path if not already set
    if dep_path not in sys.path:
        sys.path.append(dep_path)
        sys.path.append(os.path.join(pykrita_resource_dir, "my_extension"))

# THIS NEEDS TO BE CALLED BEFORE WE CAN PERFORM ANY OPERATIONS WITH EXTERNAL LIBRARIES 
link_external_packages()

from PyQt5.QtWidgets import *
import numpy as np
import cv2
from PIL import Image
# from .core import pixelizer
import subprocess

WORKING_DIR = os.path.join(str(Krita.instance().readSetting("", "ResourceDirectory", "")), "pykrita")
INPUT_IMAGE_PATH   = os.path.join(WORKING_DIR, "my_extension/INPUT_IMAGE.png")
OUTPUT_IMAGE_PATH  = os.path.join(WORKING_DIR, "my_extension/OUTPUT_IMAGE.png")
ENGINE_PYTHON_PATH = os.path.join(WORKING_DIR, "deps/bin/python3.9")
ENGINE_ENTRY_POINT = os.path.join(WORKING_DIR, "my_extension/core/pixelizer.py")

class MyExtension(DockWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("My Extension")
        main_widget = QWidget(self)
        self.setWidget(main_widget)

        # btn_alert = QPushButton("do something else!", main_widget)
        # btn_alert.clicked.connect(self.popup)

        btn_alter_img = QPushButton("Change the image!", main_widget)
        btn_alter_img.clicked.connect(self.convert2cv2)

        main_widget.setLayout(QVBoxLayout())
        main_widget.layout().addWidget(btn_alter_img)

    def canvasChanged(self, canvas):
        pass

    def popup(self, message):
        QMessageBox.information(QWidget(), "My Extension Popup", "Numpy Version: {}".format(cv2.__version__))

    def convert2cv2(self):
        # get the current active document opened on krita
        active_doc = Krita.instance().activeDocument()

        # get the active layer with its dimensions
        layer = active_doc.activeNode()
        width = active_doc.width()
        height = active_doc.height()

        # get pixel data from the image
        pixel_data = layer.pixelData(0, 0, width, height)

        # convert pixel data to a PIL image
        mode = "RGBA"
        size = (width, height)
        pil_img = Image.frombytes(mode, size, pixel_data)

        # from PIL to numpy image and save the image to the working directory
        numpy_img = np.array(pil_img, dtype=np.uint8)
        cv2.imwrite(INPUT_IMAGE_PATH, numpy_img)

        # fire up the pixelization subprocesses
        subprocess.Popen([ENGINE_PYTHON_PATH, ENGINE_ENTRY_POINT, WORKING_DIR+"/my_extension", INPUT_IMAGE_PATH, OUTPUT_IMAGE_PATH]).wait()

        # # TODO: pass the numpy image into the pixelization and normal functions...
        # pixelated_im = pixelizer.pilexate_image(numpy_img)

        # new_width, new_height = pixelated_im[1], pixelated_im[0]

        # result_image = Image.fromarray(pixelated_im, mode)

        # result_pixel_data = result_image.tobytes()

        # layer.setPixelData(result_pixel_data, 0, 0, new_width, new_height)

        # active_doc.refreshProjection()



# And add the extension to Krita's list of extensions:
Krita.instance().addDockWidgetFactory(DockWidgetFactory(
    "My Extension", DockWidgetFactoryBase.DockRight, MyExtension))

